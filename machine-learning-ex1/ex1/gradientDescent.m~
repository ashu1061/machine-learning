function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)

%   theta = GRADIENTDESENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

  
x=zeros(2,1);
for i=1:m
  x=x+(X(i,:)*theta-y(i,:))*X(i,:)';
end
theta=theta-(alpha/m)*x;
 % Save the cost J in every iteration    
J_history(iter) = computeCost(X, y, theta);

end

end
